var postDoc1 = { title: "React常见问题的整理", date: new Date(), url: "/00001", id: "00001", author: "刘泽宇", markdown: "> React 起源于 Facebook 的内部项目，用来架设 Instagram 的网站。React 的设计可以简单理解为 **组件的组合模式和数据的单向流动**。以下是 React 常见问题的整理\n\n#### setState之后发生了什么？\n\n调用 setState() 函数之后，React 会将传入的参数对象与组件当前的状态进行合并。在合并过程中，React 会以相对高效的方式根据新的状态构建 React 元素树并重新渲染整个UI界面。在 React 得到元素树之后，React 会自动计算出新的树与老树的节点差异，然后根据差异对界面进行最小化重渲染。在差异计算 Diff 算法中，React 能够相对精确地知道哪些位置发生了改变以及应该如何改变，这就保证了按需更新，而不是全部重新渲染。\n\n#### React 中 Element 和 Component 的区别是？\n\n简单而言，React Element 是描述屏幕上所见内容的数据结构，是对于 UI 的对象表述。典型的 React Element 就是利用 JSX 构建的声明式代码片然后被转化为 createElement 的调用组合。而 React Component 则是可以接收参数输入并且返回某个 React Element 的函数或者类。\n\n#### React 中 ref 的作用是什么？\n\nref 是 React 提供给我们安全访问 DOM 元素或者某个组件实例的句柄。我们可以为元素添加 ref 属性然后在回调函数中接受该元素在 DOM 树中的句柄，该值会作为回调函数的第一个参数返回：\n\n```javascript\nclass CustomForm extends Component {\n  handleSubmit = () => {\n    console.log(\"Input Value: \", this.input.value)\n  }\n  render () {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input type=\'text\' ref={(input) => this.input = input} \/>\n        <button type=\'submit\'>Submit<\/button>\n      <\/form>\n    )\n  }\n}\n```\n\n上述代码中的 input 域包含了一个 ref 属性，该属性声明的回调函数会接收 input 对应的 DOM 元素，我们将其绑定到 this 指针以便在组件内的其他函数中使用。另外值得一提的是，refs 并不是类组件的专属，函数式组件同样能够利用闭包暂存其值：\n\n```javascript\nfunction CustomForm ({handleSubmit}) {\n  let inputElement;\n  return (\n    <form onSubmit={() => handleSubmit(inputElement.value)}>\n      <input type=\'text\' ref={(input) => inputElement = input} \/>\n      <button type=\'submit\'>Submit<\/button>\n    <\/form>\n  )\n}\n```\n\n#### React 中 keys 的作用是什么？\n\nKeys 是 React 用于追踪哪些列表中元素被修改、被添加或者被移除的辅助标识。\n\n```javascript\nrender () {\n  const {\n    todoItems\n  } = this.state;\n  return (\n    <ul>\n      {todoItems.map(item => {\n        return <li key={item.id}>{item}<\/li>\n      })}\n    <\/ul>\n  )\n}\n```\n\n在开发过程中，我们需要保证某个元素的 key 在其同级元素中具有唯一性。在 React Diff 算法中 React 会借助元素的 Key 值来判断该元素是新近创建的还是被移动而来的元素，从而减少不必要的元素重渲染。此外，React 还需要借助 Key 值来判断元素与本地状态的关联关系，因此我们绝不可忽视转换函数中 Key 的重要性。\n\nkey 必须是字符串类型，它的取值可以用数据对象的某个唯一属性，或是对数据进行hash来生成key。但是强烈不推荐用数组 index 来作为 key。如果数据更新仅仅是数组重新排序或在其中间位置插入新元素，那么视图元素都将重新渲染。来看下例子：\n\n```javascript\n\/\/ this.state.list = [\'a\',\'b\',\'c\']\n<ul>\n  {list.map((val, index) => {\n   \treturn <li key={index}>{val}<\/li>\n  })}\n<\/ul>\n\n<ul>\n    <li key=\"0\">a<\/li>\n    <li key=\"1\">b<\/li>\n    <li key=\"2\">c<\/li>\n<\/ul>\n\n\/\/ 数组重排 -> [\'c\',\'a\',\'b\']\n<ul>\n    <li key=\"0\">c<\/li>\n    <li key=\"1\">a<\/li>\n    <li key=\"2\">b<\/li>\n<\/ul>\n```\n\nReact 发现 key 为 0,1,2 的元素的 text 都变了，将会修改三者的 DOM，而不是移动它们。\n\n#### Controlled Component 与 Uncontrolled Component 之间的区别是什么？\n\nReact 的核心组成之一就是能够维持内部状态的自治组件，不过当我们引入原生的HTML表单元素时，如：input , select , textarea 等，我们是否应该将所有的数据托管到 React 组件中还是将其仍然保留在 DOM 元素中呢？这个问题的答案就是受控组件与非受控组件的定义分割。\n\n受控组件（Controlled Component）代指那些交由 React 控制并且所有的表单数据统一存放的组件。譬如下面这段代码中 username 变量值并没有存放到 DOM 元素中，而是存放在组件状态数据中。任何时候我们需要改变 username 变量值时，我们应当利用 onChange 事件去调用 setState() 函数进行修改。\n\n```javascript\nclass ControlledForm extends Component {\n  state = {\n    username: \'\'\n  }\n  updateUsername = (e) => {\n    this.setState({\n      username: e.target.value,\n    })\n  }\n  handleSubmit = () => {\n    console.log(\"Input Value: \", this.state.username);\n  }\n  render () {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input\n     \t  type=\'text\'\n          value={this.state.username}\n          onChange={this.updateUsername} \n        \/>\n        <button type=\'submit\'>Submit<\/button>\n      <\/form>\n    )\n  }\n}\n```\n\n而非受控组件（Uncontrolled Component）则是由 DOM 存放表单数据，并非存放在 React 组件中。我们可以使用 refs 来操控DOM元素，或者通过 id 来获取表单值\n\n```javascript\nclass UnControlledForm extends Component {\n  handleSubmit = () => {\n    console.log(\"Input Value: \", this.input.value)\n  }\n  render () {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input\n          type=\'text\'\n          ref={(input) => this.input = input} \n        \/>\n        <button type=\'submit\'>Submit<\/button>\n      <\/form>\n    )\n  }\n}\n```\n\n#### 在生命周期中的哪一步你应该发起 AJAX 请求？\n\n我们应当将AJAX 请求放到 componentDidMount 函数中执行，主要原因有下：\n\n- React 下一代调和算法 Fiber 会通过开始或停止渲染的方式优化应用性能，其会影响到 componentWillMount 的触发次数。对于 componentWillMount 这个生命周期函数的调用次数会变得不确定，React 可能会多次频繁调用 componentWillMount。如果我们将 AJAX 请求放到 componentWillMount 函数中，那么显而易见其会被触发多次，自然也就不是好的选择。\n- 如果我们将 AJAX 请求放置在生命周期的其他函数中，我们并不能保证请求仅在组件挂载完毕后才会要求响应。如果我们的数据请求在组件挂载之前就完成，并且调用了 setState() 函数将数据添加到组件状态中，对于未挂载的组件则会报错。而在 componentDidMount 函数中进行 AJAX 请求则能有效避免这个问题。\n\n\n#### shouldComponentUpdate 的作用是啥以及为何它这么重要？\n\n组件在决定重新渲染之前会调用 shouldComponentUpdate，该函数将是否重新渲染的权限交给了开发者，默认直接返回 `true`，表示默认直接出发dom更新。我们应该根据组件的应用场景设置函数的合理返回值能够帮我们避免不必要的更新。值得注意的是，React 会非常频繁的调用该函数，所以如果你打算自己实现该函数的逻辑，请尽可能保证性能。\n\n#### 传入 setState 函数的第二个参数的作用是什么？\n\n该函数会在 setState 函数调用完成并且组件开始重渲染的时候被调用，我们可以用该函数来监听渲染是否完成：\n\n```javascript\nthis.setState(\n  { username: \'yanm1ng\' },\n  () => console.log(\'setState has finished and the component has re-rendered.\')\n)\n```\n\n一个小栗子：\n\n```javascript\ncomponentDidMount(){\n    this.setState({val: this.state.val + 1}, ()=>{\n      console.log(\"In callback \" + this.state.val);\n    });\n\n    console.log(\"Direct call \" + this.state.val);   \n\n    setTimeout(()=>{\n      console.log(\"begin of setTimeout\" + this.state.val);\n\n       this.setState({val: this.state.val + 1}, ()=>{\n          console.log(\"setTimeout setState callback \" + this.state.val);\n       });\n\n      setTimeout(()=>{\n        console.log(\"setTimeout of settimeout \" + this.state.val);\n      }, 0);\n\n      console.log(\"end of setTimeout \" + this.state.val);\n    }, 0);\n}\n```\n\n结果：\n\n```bash\n> Direct call 0\n> In callback 1\n> begin of setTimeout 1\n> setTimeout setState callback 2\n> end of setTimeout 2\n> setTimeout of settimeout 2\n```\n\n#### React 绑定 this 的三种方式\n\nReact 可以使用 React.createClass 、ES6 classes 、纯函数3种方式构建组件。使用 React.createClass 会自动绑定每个方法的 this 到当前组件，但使用 ES6 classes 或纯函数时，就要靠手动绑定 this 了。\n\n##### bind\n\n`Function.prototype.bind(thisArg [, arg1 [, arg2, …]])` 是 ES5 新增的函数扩展方法， bind() 返回一个新的函数对象，该函数的 this 被绑定到 thisArg 上，并向事件处理器中传入参数。\n\n```javascript\nimport React, { Component } from \'react\'\n\nclass Test extends React.Component {\n    constructor (props) {\n        super(props)\n        this.state = {\n          message: \'Hello!\'\n        }\n    }\n    handleClick (name, e) {\n        console.log(this.state.message + name)\n    }\n    render () {\n        return (\n            <div>\n                <button onClick={this.handleClick.bind(this, \'yanm1ng\')}>Say Hello<\/button>\n            <\/div>\n        )\n    }\n}\n```\n\n##### 构造函数\n\n在构造函数  constructor 内绑定 this，好处是仅需要绑定一次，避免每次渲染时都要重新绑定，函数在别处复用时也无需再次绑定。\n\n```javascript\nimport React, { Component } from \'react\'\n\nclass Test extends React.Component {\n    constructor (props) {\n        super(props)\n        this.state = {\n          message: \'Hello!\'\n        }\n        this.handleClick = this.handleClick.bind(this)\n    }\n    handleClick (e) {\n        console.log(this.state.message)\n    }\n    render () {\n        return (\n            <div>\n                <button onClick={this.handleClick}>Say Hello<\/button>\n            <\/div>\n        )\n    }\n}\n```\n\n##### 箭头函数\n\n箭头函数则会捕获其所在上下文的 this 值，作为自己的 this 值，使用箭头函数就不用担心函数内的 this 不是指向组件内部了。可以按下面这种方式使用箭头函数：\n\n```javascript\nclass Test extends React.Component {\n    constructor (props) {\n        super(props)\n        this.state = {\n          message: \'Hello!\'\n        }\n    }\n    handleClick (e) {\n        console.log(this.state.message)\n    }\n    render () {\n        return (\n            <div>\n                <button onClick={() => this.handleClick()}>Say Hello<\/button>\n            <\/div>\n        )\n    }\n}\n```\n\n#### React 组件生命周期\n\n![](https:\/\/segmentfault.com\/img\/remote\/1460000008325026?w=1674&h=1258\/view)\n\n", content: "<blockquote>\n<p>React 起源于 Facebook 的内部项目，用来架设 Instagram 的网站。React 的设计可以简单理解为 <strong>组件的组合模式和数据的单向流动<\/strong>。以下是 React 常见问题的整理<\/p>\n<\/blockquote>\n<h4 id=\"setState之后发生了什么？\"><a href=\"#setState之后发生了什么？\" class=\"headerlink\" title=\"setState之后发生了什么？\">#<\/a>setState之后发生了什么？<\/h4><p>调用 setState() 函数之后，React 会将传入的参数对象与组件当前的状态进行合并。在合并过程中，React 会以相对高效的方式根据新的状态构建 React 元素树并重新渲染整个UI界面。在 React 得到元素树之后，React 会自动计算出新的树与老树的节点差异，然后根据差异对界面进行最小化重渲染。在差异计算 Diff 算法中，React 能够相对精确地知道哪些位置发生了改变以及应该如何改变，这就保证了按需更新，而不是全部重新渲染。<\/p>\n<h4 id=\"React-中-Element-和-Component-的区别是？\"><a href=\"#React-中-Element-和-Component-的区别是？\" class=\"headerlink\" title=\"React 中 Element 和 Component 的区别是？\">#<\/a>React 中 Element 和 Component 的区别是？<\/h4><p>简单而言，React Element 是描述屏幕上所见内容的数据结构，是对于 UI 的对象表述。典型的 React Element 就是利用 JSX 构建的声明式代码片然后被转化为 createElement 的调用组合。而 React Component 则是可以接收参数输入并且返回某个 React Element 的函数或者类。<\/p>\n<h4 id=\"React-中-ref-的作用是什么？\"><a href=\"#React-中-ref-的作用是什么？\" class=\"headerlink\" title=\"React 中 ref 的作用是什么？\">#<\/a>React 中 ref 的作用是什么？<\/h4><p>ref 是 React 提供给我们安全访问 DOM 元素或者某个组件实例的句柄。我们可以为元素添加 ref 属性然后在回调函数中接受该元素在 DOM 树中的句柄，该值会作为回调函数的第一个参数返回：<\/p>\n<pre><code class=\"javascript\"><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1<\/span><br><span class=\"line\">2<\/span><br><span class=\"line\">3<\/span><br><span class=\"line\">4<\/span><br><span class=\"line\">5<\/span><br><span class=\"line\">6<\/span><br><span class=\"line\">7<\/span><br><span class=\"line\">8<\/span><br><span class=\"line\">9<\/span><br><span class=\"line\">10<\/span><br><span class=\"line\">11<\/span><br><span class=\"line\">12<\/span><br><span class=\"line\">13<\/span><br><\/pre><\/td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class<\/span> <span class=\"title\">CustomForm<\/span> <span class=\"keyword\">extends<\/span> <span class=\"title\">Component<\/span> <\/span>{<\/span><br><span class=\"line\">  handleSubmit = <span class=\"function\"><span class=\"params\">()<\/span> =&gt;<\/span> {<\/span><br><span class=\"line\">    <span class=\"built_in\">console<\/span>.log(<span class=\"string\">\"Input Value: \"<\/span>, <span class=\"keyword\">this<\/span>.input.value)<\/span><br><span class=\"line\">  }<\/span><br><span class=\"line\">  render () {<\/span><br><span class=\"line\">    <span class=\"keyword\">return<\/span> (<\/span><br><span class=\"line\">      &lt;form onSubmit={<span class=\"keyword\">this<\/span>.handleSubmit}&gt;<\/span><br><span class=\"line\">        &lt;input type=<span class=\"string\">\'text\'<\/span> ref={(input) =&gt; <span class=\"keyword\">this<\/span>.input = input} \/&gt;<\/span><br><span class=\"line\">        &lt;button type=<span class=\"string\">\'submit\'<\/span>&gt;Submit&lt;<span class=\"regexp\">\/button&gt;<\/span><\/span><br><span class=\"line\"><span class=\"regexp\">      &lt;\/<\/span>form&gt;<\/span><br><span class=\"line\">    )<\/span><br><span class=\"line\">  }<\/span><br><span class=\"line\">}<\/span><br><\/pre><\/td><\/tr><\/table><\/figure><\/code><\/pre>\n<p>上述代码中的 input 域包含了一个 ref 属性，该属性声明的回调函数会接收 input 对应的 DOM 元素，我们将其绑定到 this 指针以便在组件内的其他函数中使用。另外值得一提的是，refs 并不是类组件的专属，函数式组件同样能够利用闭包暂存其值：<\/p>\n<pre><code class=\"javascript\"><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1<\/span><br><span class=\"line\">2<\/span><br><span class=\"line\">3<\/span><br><span class=\"line\">4<\/span><br><span class=\"line\">5<\/span><br><span class=\"line\">6<\/span><br><span class=\"line\">7<\/span><br><span class=\"line\">8<\/span><br><span class=\"line\">9<\/span><br><\/pre><\/td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function<\/span> <span class=\"title\">CustomForm<\/span> (<span class=\"params\">{handleSubmit}<\/span>) <\/span>{<\/span><br><span class=\"line\">  <span class=\"keyword\">let<\/span> inputElement;<\/span><br><span class=\"line\">  <span class=\"keyword\">return<\/span> (<\/span><br><span class=\"line\">    &lt;form onSubmit={() =&gt; handleSubmit(inputElement.value)}&gt;<\/span><br><span class=\"line\">      &lt;input type=<span class=\"string\">\'text\'<\/span> ref={(input) =&gt; inputElement = input} \/&gt;<\/span><br><span class=\"line\">      &lt;button type=<span class=\"string\">\'submit\'<\/span>&gt;Submit&lt;<span class=\"regexp\">\/button&gt;<\/span><\/span><br><span class=\"line\"><span class=\"regexp\">    &lt;\/<\/span>form&gt;<\/span><br><span class=\"line\">  )<\/span><br><span class=\"line\">}<\/span><br><\/pre><\/td><\/tr><\/table><\/figure><\/code><\/pre>\n<h4 id=\"React-中-keys-的作用是什么？\"><a href=\"#React-中-keys-的作用是什么？\" class=\"headerlink\" title=\"React 中 keys 的作用是什么？\">#<\/a>React 中 keys 的作用是什么？<\/h4><p>Keys 是 React 用于追踪哪些列表中元素被修改、被添加或者被移除的辅助标识。<\/p>\n<pre><code class=\"javascript\"><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1<\/span><br><span class=\"line\">2<\/span><br><span class=\"line\">3<\/span><br><span class=\"line\">4<\/span><br><span class=\"line\">5<\/span><br><span class=\"line\">6<\/span><br><span class=\"line\">7<\/span><br><span class=\"line\">8<\/span><br><span class=\"line\">9<\/span><br><span class=\"line\">10<\/span><br><span class=\"line\">11<\/span><br><span class=\"line\">12<\/span><br><\/pre><\/td><td class=\"code\"><pre><span class=\"line\">render () {<\/span><br><span class=\"line\">  <span class=\"keyword\">const<\/span> {<\/span><br><span class=\"line\">    todoItems<\/span><br><span class=\"line\">  } = <span class=\"keyword\">this<\/span>.state;<\/span><br><span class=\"line\">  <span class=\"keyword\">return<\/span> (<\/span><br><span class=\"line\">    &lt;ul&gt;<\/span><br><span class=\"line\">      {todoItems.map(<span class=\"function\"><span class=\"params\">item<\/span> =&gt;<\/span> {<\/span><br><span class=\"line\">        <span class=\"keyword\">return<\/span> &lt;li key={item.id}&gt;{item}&lt;\/li&gt;<\/span><br><span class=\"line\">      })}<\/span><br><span class=\"line\">    &lt;<span class=\"regexp\">\/ul&gt;<\/span><\/span><br><span class=\"line\"><span class=\"regexp\">  )<\/span><\/span><br><span class=\"line\"><span class=\"regexp\">}<\/span><\/span><br><\/pre><\/td><\/tr><\/table><\/figure><\/code><\/pre>\n<p>在开发过程中，我们需要保证某个元素的 key 在其同级元素中具有唯一性。在 React Diff 算法中 React 会借助元素的 Key 值来判断该元素是新近创建的还是被移动而来的元素，从而减少不必要的元素重渲染。此外，React 还需要借助 Key 值来判断元素与本地状态的关联关系，因此我们绝不可忽视转换函数中 Key 的重要性。<\/p>\n<p>key 必须是字符串类型，它的取值可以用数据对象的某个唯一属性，或是对数据进行hash来生成key。但是强烈不推荐用数组 index 来作为 key。如果数据更新仅仅是数组重新排序或在其中间位置插入新元素，那么视图元素都将重新渲染。来看下例子：<\/p>\n<pre><code class=\"javascript\"><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1<\/span><br><span class=\"line\">2<\/span><br><span class=\"line\">3<\/span><br><span class=\"line\">4<\/span><br><span class=\"line\">5<\/span><br><span class=\"line\">6<\/span><br><span class=\"line\">7<\/span><br><span class=\"line\">8<\/span><br><span class=\"line\">9<\/span><br><span class=\"line\">10<\/span><br><span class=\"line\">11<\/span><br><span class=\"line\">12<\/span><br><span class=\"line\">13<\/span><br><span class=\"line\">14<\/span><br><span class=\"line\">15<\/span><br><span class=\"line\">16<\/span><br><span class=\"line\">17<\/span><br><span class=\"line\">18<\/span><br><span class=\"line\">19<\/span><br><\/pre><\/td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">\/\/ this.state.list = [\'a\',\'b\',\'c\']<\/span><\/span><br><span class=\"line\">&lt;ul&gt;<\/span><br><span class=\"line\">  {list.map(<span class=\"function\">(<span class=\"params\">val, index<\/span>) =&gt;<\/span> {<\/span><br><span class=\"line\">       <span class=\"keyword\">return<\/span> &lt;li key={index}&gt;{val}&lt;\/li&gt;<\/span><br><span class=\"line\">  })}<\/span><br><span class=\"line\">&lt;<span class=\"regexp\">\/ul&gt;<\/span><\/span><br><span class=\"line\"><span class=\"regexp\"><\/span><\/span><br><span class=\"line\"><span class=\"regexp\">&lt;ul&gt;<\/span><\/span><br><span class=\"line\"><span class=\"regexp\">    &lt;li key=\"0\"&gt;a&lt;\/<\/span>li&gt;<\/span><br><span class=\"line\">    &lt;li key=<span class=\"string\">\"1\"<\/span>&gt;b&lt;<span class=\"regexp\">\/li&gt;<\/span><\/span><br><span class=\"line\"><span class=\"regexp\">    &lt;li key=\"2\"&gt;c&lt;\/<\/span>li&gt;<\/span><br><span class=\"line\">&lt;<span class=\"regexp\">\/ul&gt;<\/span><\/span><br><span class=\"line\"><span class=\"regexp\"><\/span><\/span><br><span class=\"line\"><span class=\"regexp\">\/<\/span><span class=\"regexp\">\/ 数组重排 -&gt; [\'c\',\'a\',\'b\']<\/span><\/span><br><span class=\"line\"><span class=\"regexp\">&lt;ul&gt;<\/span><\/span><br><span class=\"line\"><span class=\"regexp\">    &lt;li key=\"0\"&gt;c&lt;\/<\/span>li&gt;<\/span><br><span class=\"line\">    &lt;li key=<span class=\"string\">\"1\"<\/span>&gt;a&lt;<span class=\"regexp\">\/li&gt;<\/span><\/span><br><span class=\"line\"><span class=\"regexp\">    &lt;li key=\"2\"&gt;b&lt;\/<\/span>li&gt;<\/span><br><span class=\"line\">&lt;<span class=\"regexp\">\/ul&gt;<\/span><\/span><br><\/pre><\/td><\/tr><\/table><\/figure><\/code><\/pre>\n<p>React 发现 key 为 0,1,2 的元素的 text 都变了，将会修改三者的 DOM，而不是移动它们。<\/p>\n<h4 id=\"Controlled-Component-与-Uncontrolled-Component-之间的区别是什么？\"><a href=\"#Controlled-Component-与-Uncontrolled-Component-之间的区别是什么？\" class=\"headerlink\" title=\"Controlled Component 与 Uncontrolled Component 之间的区别是什么？\">#<\/a>Controlled Component 与 Uncontrolled Component 之间的区别是什么？<\/h4><p>React 的核心组成之一就是能够维持内部状态的自治组件，不过当我们引入原生的HTML表单元素时，如：input , select , textarea 等，我们是否应该将所有的数据托管到 React 组件中还是将其仍然保留在 DOM 元素中呢？这个问题的答案就是受控组件与非受控组件的定义分割。<\/p>\n<p>受控组件（Controlled Component）代指那些交由 React 控制并且所有的表单数据统一存放的组件。譬如下面这段代码中 username 变量值并没有存放到 DOM 元素中，而是存放在组件状态数据中。任何时候我们需要改变 username 变量值时，我们应当利用 onChange 事件去调用 setState() 函数进行修改。<\/p>\n<pre><code class=\"javascript\"><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1<\/span><br><span class=\"line\">2<\/span><br><span class=\"line\">3<\/span><br><span class=\"line\">4<\/span><br><span class=\"line\">5<\/span><br><span class=\"line\">6<\/span><br><span class=\"line\">7<\/span><br><span class=\"line\">8<\/span><br><span class=\"line\">9<\/span><br><span class=\"line\">10<\/span><br><span class=\"line\">11<\/span><br><span class=\"line\">12<\/span><br><span class=\"line\">13<\/span><br><span class=\"line\">14<\/span><br><span class=\"line\">15<\/span><br><span class=\"line\">16<\/span><br><span class=\"line\">17<\/span><br><span class=\"line\">18<\/span><br><span class=\"line\">19<\/span><br><span class=\"line\">20<\/span><br><span class=\"line\">21<\/span><br><span class=\"line\">22<\/span><br><span class=\"line\">23<\/span><br><span class=\"line\">24<\/span><br><span class=\"line\">25<\/span><br><\/pre><\/td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class<\/span> <span class=\"title\">ControlledForm<\/span> <span class=\"keyword\">extends<\/span> <span class=\"title\">Component<\/span> <\/span>{<\/span><br><span class=\"line\">  state = {<\/span><br><span class=\"line\">    username: <span class=\"string\">\'\'<\/span><\/span><br><span class=\"line\">  }<\/span><br><span class=\"line\">  updateUsername = <span class=\"function\">(<span class=\"params\">e<\/span>) =&gt;<\/span> {<\/span><br><span class=\"line\">    <span class=\"keyword\">this<\/span>.setState({<\/span><br><span class=\"line\">      username: e.target.value,<\/span><br><span class=\"line\">    })<\/span><br><span class=\"line\">  }<\/span><br><span class=\"line\">  handleSubmit = <span class=\"function\"><span class=\"params\">()<\/span> =&gt;<\/span> {<\/span><br><span class=\"line\">    <span class=\"built_in\">console<\/span>.log(<span class=\"string\">\"Input Value: \"<\/span>, <span class=\"keyword\">this<\/span>.state.username);<\/span><br><span class=\"line\">  }<\/span><br><span class=\"line\">  render () {<\/span><br><span class=\"line\">    <span class=\"keyword\">return<\/span> (<\/span><br><span class=\"line\">      &lt;form onSubmit={<span class=\"keyword\">this<\/span>.handleSubmit}&gt;<\/span><br><span class=\"line\">        &lt;input<\/span><br><span class=\"line\">           type=<span class=\"string\">\'text\'<\/span><\/span><br><span class=\"line\">          value={<span class=\"keyword\">this<\/span>.state.username}<\/span><br><span class=\"line\">          onChange={<span class=\"keyword\">this<\/span>.updateUsername} <\/span><br><span class=\"line\">        \/&gt;<\/span><br><span class=\"line\">        &lt;button type=<span class=\"string\">\'submit\'<\/span>&gt;Submit&lt;<span class=\"regexp\">\/button&gt;<\/span><\/span><br><span class=\"line\"><span class=\"regexp\">      &lt;\/<\/span>form&gt;<\/span><br><span class=\"line\">    )<\/span><br><span class=\"line\">  }<\/span><br><span class=\"line\">}<\/span><br><\/pre><\/td><\/tr><\/table><\/figure><\/code><\/pre>\n<p>而非受控组件（Uncontrolled Component）则是由 DOM 存放表单数据，并非存放在 React 组件中。我们可以使用 refs 来操控DOM元素，或者通过 id 来获取表单值<\/p>\n<pre><code class=\"javascript\"><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1<\/span><br><span class=\"line\">2<\/span><br><span class=\"line\">3<\/span><br><span class=\"line\">4<\/span><br><span class=\"line\">5<\/span><br><span class=\"line\">6<\/span><br><span class=\"line\">7<\/span><br><span class=\"line\">8<\/span><br><span class=\"line\">9<\/span><br><span class=\"line\">10<\/span><br><span class=\"line\">11<\/span><br><span class=\"line\">12<\/span><br><span class=\"line\">13<\/span><br><span class=\"line\">14<\/span><br><span class=\"line\">15<\/span><br><span class=\"line\">16<\/span><br><\/pre><\/td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class<\/span> <span class=\"title\">UnControlledForm<\/span> <span class=\"keyword\">extends<\/span> <span class=\"title\">Component<\/span> <\/span>{<\/span><br><span class=\"line\">  handleSubmit = <span class=\"function\"><span class=\"params\">()<\/span> =&gt;<\/span> {<\/span><br><span class=\"line\">    <span class=\"built_in\">console<\/span>.log(<span class=\"string\">\"Input Value: \"<\/span>, <span class=\"keyword\">this<\/span>.input.value)<\/span><br><span class=\"line\">  }<\/span><br><span class=\"line\">  render () {<\/span><br><span class=\"line\">    <span class=\"keyword\">return<\/span> (<\/span><br><span class=\"line\">      &lt;form onSubmit={<span class=\"keyword\">this<\/span>.handleSubmit}&gt;<\/span><br><span class=\"line\">        &lt;input<\/span><br><span class=\"line\">          type=<span class=\"string\">\'text\'<\/span><\/span><br><span class=\"line\">          ref={(input) =&gt; <span class=\"keyword\">this<\/span>.input = input} <\/span><br><span class=\"line\">        \/&gt;<\/span><br><span class=\"line\">        &lt;button type=<span class=\"string\">\'submit\'<\/span>&gt;Submit&lt;<span class=\"regexp\">\/button&gt;<\/span><\/span><br><span class=\"line\"><span class=\"regexp\">      &lt;\/<\/span>form&gt;<\/span><br><span class=\"line\">    )<\/span><br><span class=\"line\">  }<\/span><br><span class=\"line\">}<\/span><br><\/pre><\/td><\/tr><\/table><\/figure><\/code><\/pre>\n<h4 id=\"在生命周期中的哪一步你应该发起-AJAX-请求？\"><a href=\"#在生命周期中的哪一步你应该发起-AJAX-请求？\" class=\"headerlink\" title=\"在生命周期中的哪一步你应该发起 AJAX 请求？\">#<\/a>在生命周期中的哪一步你应该发起 AJAX 请求？<\/h4><p>我们应当将AJAX 请求放到 componentDidMount 函数中执行，主要原因有下：<\/p>\n<ul>\n<li>React 下一代调和算法 Fiber 会通过开始或停止渲染的方式优化应用性能，其会影响到 componentWillMount 的触发次数。对于 componentWillMount 这个生命周期函数的调用次数会变得不确定，React 可能会多次频繁调用 componentWillMount。如果我们将 AJAX 请求放到 componentWillMount 函数中，那么显而易见其会被触发多次，自然也就不是好的选择。<\/li>\n<li>如果我们将 AJAX 请求放置在生命周期的其他函数中，我们并不能保证请求仅在组件挂载完毕后才会要求响应。如果我们的数据请求在组件挂载之前就完成，并且调用了 setState() 函数将数据添加到组件状态中，对于未挂载的组件则会报错。而在 componentDidMount 函数中进行 AJAX 请求则能有效避免这个问题。<\/li>\n<\/ul>\n<h4 id=\"shouldComponentUpdate-的作用是啥以及为何它这么重要？\"><a href=\"#shouldComponentUpdate-的作用是啥以及为何它这么重要？\" class=\"headerlink\" title=\"shouldComponentUpdate 的作用是啥以及为何它这么重要？\">#<\/a>shouldComponentUpdate 的作用是啥以及为何它这么重要？<\/h4><p>组件在决定重新渲染之前会调用 shouldComponentUpdate，该函数将是否重新渲染的权限交给了开发者，默认直接返回 <code>true<\/code>，表示默认直接出发dom更新。我们应该根据组件的应用场景设置函数的合理返回值能够帮我们避免不必要的更新。值得注意的是，React 会非常频繁的调用该函数，所以如果你打算自己实现该函数的逻辑，请尽可能保证性能。<\/p>\n<h4 id=\"传入-setState-函数的第二个参数的作用是什么？\"><a href=\"#传入-setState-函数的第二个参数的作用是什么？\" class=\"headerlink\" title=\"传入 setState 函数的第二个参数的作用是什么？\">#<\/a>传入 setState 函数的第二个参数的作用是什么？<\/h4><p>该函数会在 setState 函数调用完成并且组件开始重渲染的时候被调用，我们可以用该函数来监听渲染是否完成：<\/p>\n<pre><code class=\"javascript\"><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1<\/span><br><span class=\"line\">2<\/span><br><span class=\"line\">3<\/span><br><span class=\"line\">4<\/span><br><\/pre><\/td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this<\/span>.setState(<\/span><br><span class=\"line\">  { <span class=\"attr\">username<\/span>: <span class=\"string\">\'yanm1ng\'<\/span> },<\/span><br><span class=\"line\">  () =&gt; <span class=\"built_in\">console<\/span>.log(<span class=\"string\">\'setState has finished and the component has re-rendered.\'<\/span>)<\/span><br><span class=\"line\">)<\/span><br><\/pre><\/td><\/tr><\/table><\/figure><\/code><\/pre>\n<p>一个小栗子：<\/p>\n<pre><code class=\"javascript\"><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1<\/span><br><span class=\"line\">2<\/span><br><span class=\"line\">3<\/span><br><span class=\"line\">4<\/span><br><span class=\"line\">5<\/span><br><span class=\"line\">6<\/span><br><span class=\"line\">7<\/span><br><span class=\"line\">8<\/span><br><span class=\"line\">9<\/span><br><span class=\"line\">10<\/span><br><span class=\"line\">11<\/span><br><span class=\"line\">12<\/span><br><span class=\"line\">13<\/span><br><span class=\"line\">14<\/span><br><span class=\"line\">15<\/span><br><span class=\"line\">16<\/span><br><span class=\"line\">17<\/span><br><span class=\"line\">18<\/span><br><span class=\"line\">19<\/span><br><span class=\"line\">20<\/span><br><span class=\"line\">21<\/span><br><\/pre><\/td><td class=\"code\"><pre><span class=\"line\">componentDidMount(){<\/span><br><span class=\"line\">    <span class=\"keyword\">this<\/span>.setState({<span class=\"attr\">val<\/span>: <span class=\"keyword\">this<\/span>.state.val + <span class=\"number\">1<\/span>}, ()=&gt;{<\/span><br><span class=\"line\">      <span class=\"built_in\">console<\/span>.log(<span class=\"string\">\"In callback \"<\/span> + <span class=\"keyword\">this<\/span>.state.val);<\/span><br><span class=\"line\">    });<\/span><br><span class=\"line\"><\/span><br><span class=\"line\">    <span class=\"built_in\">console<\/span>.log(<span class=\"string\">\"Direct call \"<\/span> + <span class=\"keyword\">this<\/span>.state.val);   <\/span><br><span class=\"line\"><\/span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()<\/span>=&gt;<\/span>{<\/span><br><span class=\"line\">      <span class=\"built_in\">console<\/span>.log(<span class=\"string\">\"begin of setTimeout\"<\/span> + <span class=\"keyword\">this<\/span>.state.val);<\/span><br><span class=\"line\"><\/span><br><span class=\"line\">       <span class=\"keyword\">this<\/span>.setState({<span class=\"attr\">val<\/span>: <span class=\"keyword\">this<\/span>.state.val + <span class=\"number\">1<\/span>}, ()=&gt;{<\/span><br><span class=\"line\">          <span class=\"built_in\">console<\/span>.log(<span class=\"string\">\"setTimeout setState callback \"<\/span> + <span class=\"keyword\">this<\/span>.state.val);<\/span><br><span class=\"line\">       });<\/span><br><span class=\"line\"><\/span><br><span class=\"line\">      setTimeout(<span class=\"function\"><span class=\"params\">()<\/span>=&gt;<\/span>{<\/span><br><span class=\"line\">        <span class=\"built_in\">console<\/span>.log(<span class=\"string\">\"setTimeout of settimeout \"<\/span> + <span class=\"keyword\">this<\/span>.state.val);<\/span><br><span class=\"line\">      }, <span class=\"number\">0<\/span>);<\/span><br><span class=\"line\"><\/span><br><span class=\"line\">      <span class=\"built_in\">console<\/span>.log(<span class=\"string\">\"end of setTimeout \"<\/span> + <span class=\"keyword\">this<\/span>.state.val);<\/span><br><span class=\"line\">    }, <span class=\"number\">0<\/span>);<\/span><br><span class=\"line\">}<\/span><br><\/pre><\/td><\/tr><\/table><\/figure><\/code><\/pre>\n<p>结果：<\/p>\n<pre><code class=\"bash\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1<\/span><br><span class=\"line\">2<\/span><br><span class=\"line\">3<\/span><br><span class=\"line\">4<\/span><br><span class=\"line\">5<\/span><br><span class=\"line\">6<\/span><br><\/pre><\/td><td class=\"code\"><pre><span class=\"line\">&gt; Direct call 0<\/span><br><span class=\"line\">&gt; In callback 1<\/span><br><span class=\"line\">&gt; begin of setTimeout 1<\/span><br><span class=\"line\">&gt; setTimeout setState callback 2<\/span><br><span class=\"line\">&gt; end of setTimeout 2<\/span><br><span class=\"line\">&gt; setTimeout of settimeout 2<\/span><br><\/pre><\/td><\/tr><\/table><\/figure><\/code><\/pre>\n<h4 id=\"React-绑定-this-的三种方式\"><a href=\"#React-绑定-this-的三种方式\" class=\"headerlink\" title=\"React 绑定 this 的三种方式\">#<\/a>React 绑定 this 的三种方式<\/h4><p>React 可以使用 React.createClass 、ES6 classes 、纯函数3种方式构建组件。使用 React.createClass 会自动绑定每个方法的 this 到当前组件，但使用 ES6 classes 或纯函数时，就要靠手动绑定 this 了。<\/p>\n<h5 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind\">#<\/a>bind<\/h5><p><code>Function.prototype.bind(thisArg [, arg1 [, arg2, …]])<\/code> 是 ES5 新增的函数扩展方法， bind() 返回一个新的函数对象，该函数的 this 被绑定到 thisArg 上，并向事件处理器中传入参数。<\/p>\n<pre><code class=\"javascript\"><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1<\/span><br><span class=\"line\">2<\/span><br><span class=\"line\">3<\/span><br><span class=\"line\">4<\/span><br><span class=\"line\">5<\/span><br><span class=\"line\">6<\/span><br><span class=\"line\">7<\/span><br><span class=\"line\">8<\/span><br><span class=\"line\">9<\/span><br><span class=\"line\">10<\/span><br><span class=\"line\">11<\/span><br><span class=\"line\">12<\/span><br><span class=\"line\">13<\/span><br><span class=\"line\">14<\/span><br><span class=\"line\">15<\/span><br><span class=\"line\">16<\/span><br><span class=\"line\">17<\/span><br><span class=\"line\">18<\/span><br><span class=\"line\">19<\/span><br><span class=\"line\">20<\/span><br><\/pre><\/td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import<\/span> React, { Component } <span class=\"keyword\">from<\/span> <span class=\"string\">\'react\'<\/span><\/span><br><span class=\"line\"><\/span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class<\/span> <span class=\"title\">Test<\/span> <span class=\"keyword\">extends<\/span> <span class=\"title\">React<\/span>.<span class=\"title\">Component<\/span> <\/span>{<\/span><br><span class=\"line\">    <span class=\"keyword\">constructor<\/span> (props) {<\/span><br><span class=\"line\">        <span class=\"keyword\">super<\/span>(props)<\/span><br><span class=\"line\">        <span class=\"keyword\">this<\/span>.state = {<\/span><br><span class=\"line\">          message: <span class=\"string\">\'Hello!\'<\/span><\/span><br><span class=\"line\">        }<\/span><br><span class=\"line\">    }<\/span><br><span class=\"line\">    handleClick (name, e) {<\/span><br><span class=\"line\">        <span class=\"built_in\">console<\/span>.log(<span class=\"keyword\">this<\/span>.state.message + name)<\/span><br><span class=\"line\">    }<\/span><br><span class=\"line\">    render () {<\/span><br><span class=\"line\">        <span class=\"keyword\">return<\/span> (<\/span><br><span class=\"line\">            &lt;div&gt;<\/span><br><span class=\"line\">                &lt;button onClick={<span class=\"keyword\">this<\/span>.handleClick.bind(<span class=\"keyword\">this<\/span>, <span class=\"string\">\'yanm1ng\'<\/span>)}&gt;Say Hello&lt;<span class=\"regexp\">\/button&gt;<\/span><\/span><br><span class=\"line\"><span class=\"regexp\">            &lt;\/<\/span>div&gt;<\/span><br><span class=\"line\">        )<\/span><br><span class=\"line\">    }<\/span><br><span class=\"line\">}<\/span><br><\/pre><\/td><\/tr><\/table><\/figure><\/code><\/pre>\n<h5 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\">#<\/a>构造函数<\/h5><p>在构造函数  constructor 内绑定 this，好处是仅需要绑定一次，避免每次渲染时都要重新绑定，函数在别处复用时也无需再次绑定。<\/p>\n<pre><code class=\"javascript\"><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1<\/span><br><span class=\"line\">2<\/span><br><span class=\"line\">3<\/span><br><span class=\"line\">4<\/span><br><span class=\"line\">5<\/span><br><span class=\"line\">6<\/span><br><span class=\"line\">7<\/span><br><span class=\"line\">8<\/span><br><span class=\"line\">9<\/span><br><span class=\"line\">10<\/span><br><span class=\"line\">11<\/span><br><span class=\"line\">12<\/span><br><span class=\"line\">13<\/span><br><span class=\"line\">14<\/span><br><span class=\"line\">15<\/span><br><span class=\"line\">16<\/span><br><span class=\"line\">17<\/span><br><span class=\"line\">18<\/span><br><span class=\"line\">19<\/span><br><span class=\"line\">20<\/span><br><span class=\"line\">21<\/span><br><\/pre><\/td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import<\/span> React, { Component } <span class=\"keyword\">from<\/span> <span class=\"string\">\'react\'<\/span><\/span><br><span class=\"line\"><\/span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class<\/span> <span class=\"title\">Test<\/span> <span class=\"keyword\">extends<\/span> <span class=\"title\">React<\/span>.<span class=\"title\">Component<\/span> <\/span>{<\/span><br><span class=\"line\">    <span class=\"keyword\">constructor<\/span> (props) {<\/span><br><span class=\"line\">        <span class=\"keyword\">super<\/span>(props)<\/span><br><span class=\"line\">        <span class=\"keyword\">this<\/span>.state = {<\/span><br><span class=\"line\">          message: <span class=\"string\">\'Hello!\'<\/span><\/span><br><span class=\"line\">        }<\/span><br><span class=\"line\">        <span class=\"keyword\">this<\/span>.handleClick = <span class=\"keyword\">this<\/span>.handleClick.bind(<span class=\"keyword\">this<\/span>)<\/span><br><span class=\"line\">    }<\/span><br><span class=\"line\">    handleClick (e) {<\/span><br><span class=\"line\">        <span class=\"built_in\">console<\/span>.log(<span class=\"keyword\">this<\/span>.state.message)<\/span><br><span class=\"line\">    }<\/span><br><span class=\"line\">    render () {<\/span><br><span class=\"line\">        <span class=\"keyword\">return<\/span> (<\/span><br><span class=\"line\">            &lt;div&gt;<\/span><br><span class=\"line\">                &lt;button onClick={<span class=\"keyword\">this<\/span>.handleClick}&gt;Say Hello&lt;<span class=\"regexp\">\/button&gt;<\/span><\/span><br><span class=\"line\"><span class=\"regexp\">            &lt;\/<\/span>div&gt;<\/span><br><span class=\"line\">        )<\/span><br><span class=\"line\">    }<\/span><br><span class=\"line\">}<\/span><br><\/pre><\/td><\/tr><\/table><\/figure><\/code><\/pre>\n<h5 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\">#<\/a>箭头函数<\/h5><p>箭头函数则会捕获其所在上下文的 this 值，作为自己的 this 值，使用箭头函数就不用担心函数内的 this 不是指向组件内部了。可以按下面这种方式使用箭头函数：<\/p>\n<pre><code class=\"javascript\"><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1<\/span><br><span class=\"line\">2<\/span><br><span class=\"line\">3<\/span><br><span class=\"line\">4<\/span><br><span class=\"line\">5<\/span><br><span class=\"line\">6<\/span><br><span class=\"line\">7<\/span><br><span class=\"line\">8<\/span><br><span class=\"line\">9<\/span><br><span class=\"line\">10<\/span><br><span class=\"line\">11<\/span><br><span class=\"line\">12<\/span><br><span class=\"line\">13<\/span><br><span class=\"line\">14<\/span><br><span class=\"line\">15<\/span><br><span class=\"line\">16<\/span><br><span class=\"line\">17<\/span><br><span class=\"line\">18<\/span><br><\/pre><\/td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class<\/span> <span class=\"title\">Test<\/span> <span class=\"keyword\">extends<\/span> <span class=\"title\">React<\/span>.<span class=\"title\">Component<\/span> <\/span>{<\/span><br><span class=\"line\">    <span class=\"keyword\">constructor<\/span> (props) {<\/span><br><span class=\"line\">        <span class=\"keyword\">super<\/span>(props)<\/span><br><span class=\"line\">        <span class=\"keyword\">this<\/span>.state = {<\/span><br><span class=\"line\">          message: <span class=\"string\">\'Hello!\'<\/span><\/span><br><span class=\"line\">        }<\/span><br><span class=\"line\">    }<\/span><br><span class=\"line\">    handleClick (e) {<\/span><br><span class=\"line\">        <span class=\"built_in\">console<\/span>.log(<span class=\"keyword\">this<\/span>.state.message)<\/span><br><span class=\"line\">    }<\/span><br><span class=\"line\">    render () {<\/span><br><span class=\"line\">        <span class=\"keyword\">return<\/span> (<\/span><br><span class=\"line\">            &lt;div&gt;<\/span><br><span class=\"line\">                &lt;button onClick={() =&gt; <span class=\"keyword\">this<\/span>.handleClick()}&gt;Say Hello&lt;<span class=\"regexp\">\/button&gt;<\/span><\/span><br><span class=\"line\"><span class=\"regexp\">            &lt;\/<\/span>div&gt;<\/span><br><span class=\"line\">        )<\/span><br><span class=\"line\">    }<\/span><br><span class=\"line\">}<\/span><br><\/pre><\/td><\/tr><\/table><\/figure><\/code><\/pre>\n<h4 id=\"React-组件生命周期\"><a href=\"#React-组件生命周期\" class=\"headerlink\" title=\"React 组件生命周期\">#<\/a>React 组件生命周期<\/h4><p><img src=\"https:\/\/segmentfault.com\/img\/remote\/1460000008325026?w=1674&h=1258\/view\" alt=\"\"><\/p>", summary: "React 起源于 Facebook 的内部项目，用来架设 Instagram 的网站。React 的设计可以简单理解为 组件的组合模式和数据的单向流动。以下是 React 常见问题的整理 setState之后发生了什么？调用 setState() 函数之后，React 会将传入的参数对 ..." }

const insertDocuments = function(db, callback) {
  // Get the documents collection
  const collection = db.collection('post');
  // Insert some documents
  collection.insertOne(postDoc1, function(err, result) {
    assert.equal(err, null);
    console.log("Inserted 1 documents into the collection");
    callback(result);
  });
}

const MongoClient = require('mongodb').MongoClient;
const assert = require('assert');

// Connection URL
const url = 'mongodb://localhost:27017';

// Database Name
const dbName = 'blogDB';

// Use connect method to connect to the server
MongoClient.connect(url, function(err, client) {
  assert.equal(null, err);
  console.log("Connected successfully to server");

  const db = client.db(dbName);

  insertDocuments(db, function() {
    client.close();
  });
});
